// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grid_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "grid_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dsl {

namespace {

const ::google::protobuf::Descriptor* GridData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_grid_5fdata_2eproto() {
  protobuf_AddDesc_grid_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "grid_data.proto");
  GOOGLE_CHECK(file != NULL);
  GridData_descriptor_ = file->message_type(0);
  static const int GridData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, nc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, xlb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, xub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, ds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, cs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, cgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, wd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, cells_),
  };
  GridData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridData_descriptor_,
      GridData::default_instance_,
      GridData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_grid_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridData_descriptor_, &GridData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_grid_5fdata_2eproto() {
  delete GridData::default_instance_;
  delete GridData_reflection_;
}

void protobuf_AddDesc_grid_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017grid_data.proto\022\003dsl\"\207\001\n\010GridData\022\t\n\001n"
    "\030\001 \002(\005\022\n\n\002nc\030\002 \002(\005\022\013\n\003xlb\030\003 \003(\001\022\013\n\003xub\030\004"
    " \003(\001\022\n\n\002ds\030\005 \003(\001\022\n\n\002cs\030\006 \003(\001\022\n\n\002gs\030\007 \003(\005"
    "\022\013\n\003cgs\030\010 \003(\005\022\n\n\002wd\030\t \003(\010\022\r\n\005cells\030\n \003(\010", 160);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "grid_data.proto", &protobuf_RegisterTypes);
  GridData::default_instance_ = new GridData();
  GridData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_grid_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_grid_5fdata_2eproto {
  StaticDescriptorInitializer_grid_5fdata_2eproto() {
    protobuf_AddDesc_grid_5fdata_2eproto();
  }
} static_descriptor_initializer_grid_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GridData::kNFieldNumber;
const int GridData::kNcFieldNumber;
const int GridData::kXlbFieldNumber;
const int GridData::kXubFieldNumber;
const int GridData::kDsFieldNumber;
const int GridData::kCsFieldNumber;
const int GridData::kGsFieldNumber;
const int GridData::kCgsFieldNumber;
const int GridData::kWdFieldNumber;
const int GridData::kCellsFieldNumber;
#endif  // !_MSC_VER

GridData::GridData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridData::InitAsDefaultInstance() {
}

GridData::GridData(const GridData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridData::SharedCtor() {
  _cached_size_ = 0;
  n_ = 0;
  nc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridData::~GridData() {
  SharedDtor();
}

void GridData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridData_descriptor_;
}

const GridData& GridData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grid_5fdata_2eproto();
  return *default_instance_;
}

GridData* GridData::default_instance_ = NULL;

GridData* GridData::New() const {
  return new GridData;
}

void GridData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    n_ = 0;
    nc_ = 0;
  }
  xlb_.Clear();
  xub_.Clear();
  ds_.Clear();
  cs_.Clear();
  gs_.Clear();
  cgs_.Clear();
  wd_.Clear();
  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 n = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nc;
        break;
      }

      // required int32 nc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nc_)));
          set_has_nc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_xlb;
        break;
      }

      // repeated double xlb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_xlb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_xlb())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_xlb())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_xlb;
        if (input->ExpectTag(33)) goto parse_xub;
        break;
      }

      // repeated double xub = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_xub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_xub())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_xub())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_xub;
        if (input->ExpectTag(41)) goto parse_ds;
        break;
      }

      // repeated double ds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_ds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ds;
        if (input->ExpectTag(49)) goto parse_cs;
        break;
      }

      // repeated double cs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_cs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_cs;
        if (input->ExpectTag(56)) goto parse_gs;
        break;
      }

      // repeated int32 gs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_gs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gs;
        if (input->ExpectTag(64)) goto parse_cgs;
        break;
      }

      // repeated int32 cgs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cgs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_cgs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cgs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cgs;
        if (input->ExpectTag(72)) goto parse_wd;
        break;
      }

      // repeated bool wd = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 72, input, this->mutable_wd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_wd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_wd;
        if (input->ExpectTag(80)) goto parse_cells;
        break;
      }

      // repeated bool cells = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cells:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 80, input, this->mutable_cells())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_cells())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cells;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 n = 1;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->n(), output);
  }

  // required int32 nc = 2;
  if (has_nc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nc(), output);
  }

  // repeated double xlb = 3;
  for (int i = 0; i < this->xlb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->xlb(i), output);
  }

  // repeated double xub = 4;
  for (int i = 0; i < this->xub_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->xub(i), output);
  }

  // repeated double ds = 5;
  for (int i = 0; i < this->ds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->ds(i), output);
  }

  // repeated double cs = 6;
  for (int i = 0; i < this->cs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->cs(i), output);
  }

  // repeated int32 gs = 7;
  for (int i = 0; i < this->gs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->gs(i), output);
  }

  // repeated int32 cgs = 8;
  for (int i = 0; i < this->cgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->cgs(i), output);
  }

  // repeated bool wd = 9;
  for (int i = 0; i < this->wd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      9, this->wd(i), output);
  }

  // repeated bool cells = 10;
  for (int i = 0; i < this->cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      10, this->cells(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 n = 1;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->n(), target);
  }

  // required int32 nc = 2;
  if (has_nc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nc(), target);
  }

  // repeated double xlb = 3;
  for (int i = 0; i < this->xlb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->xlb(i), target);
  }

  // repeated double xub = 4;
  for (int i = 0; i < this->xub_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->xub(i), target);
  }

  // repeated double ds = 5;
  for (int i = 0; i < this->ds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->ds(i), target);
  }

  // repeated double cs = 6;
  for (int i = 0; i < this->cs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->cs(i), target);
  }

  // repeated int32 gs = 7;
  for (int i = 0; i < this->gs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->gs(i), target);
  }

  // repeated int32 cgs = 8;
  for (int i = 0; i < this->cgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->cgs(i), target);
  }

  // repeated bool wd = 9;
  for (int i = 0; i < this->wd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(9, this->wd(i), target);
  }

  // repeated bool cells = 10;
  for (int i = 0; i < this->cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(10, this->cells(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 n = 1;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n());
    }

    // required int32 nc = 2;
    if (has_nc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nc());
    }

  }
  // repeated double xlb = 3;
  {
    int data_size = 0;
    data_size = 8 * this->xlb_size();
    total_size += 1 * this->xlb_size() + data_size;
  }

  // repeated double xub = 4;
  {
    int data_size = 0;
    data_size = 8 * this->xub_size();
    total_size += 1 * this->xub_size() + data_size;
  }

  // repeated double ds = 5;
  {
    int data_size = 0;
    data_size = 8 * this->ds_size();
    total_size += 1 * this->ds_size() + data_size;
  }

  // repeated double cs = 6;
  {
    int data_size = 0;
    data_size = 8 * this->cs_size();
    total_size += 1 * this->cs_size() + data_size;
  }

  // repeated int32 gs = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->gs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gs(i));
    }
    total_size += 1 * this->gs_size() + data_size;
  }

  // repeated int32 cgs = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->cgs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cgs(i));
    }
    total_size += 1 * this->cgs_size() + data_size;
  }

  // repeated bool wd = 9;
  {
    int data_size = 0;
    data_size = 1 * this->wd_size();
    total_size += 1 * this->wd_size() + data_size;
  }

  // repeated bool cells = 10;
  {
    int data_size = 0;
    data_size = 1 * this->cells_size();
    total_size += 1 * this->cells_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridData::MergeFrom(const GridData& from) {
  GOOGLE_CHECK_NE(&from, this);
  xlb_.MergeFrom(from.xlb_);
  xub_.MergeFrom(from.xub_);
  ds_.MergeFrom(from.ds_);
  cs_.MergeFrom(from.cs_);
  gs_.MergeFrom(from.gs_);
  cgs_.MergeFrom(from.cgs_);
  wd_.MergeFrom(from.wd_);
  cells_.MergeFrom(from.cells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_nc()) {
      set_nc(from.nc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridData::CopyFrom(const GridData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GridData::Swap(GridData* other) {
  if (other != this) {
    std::swap(n_, other->n_);
    std::swap(nc_, other->nc_);
    xlb_.Swap(&other->xlb_);
    xub_.Swap(&other->xub_);
    ds_.Swap(&other->ds_);
    cs_.Swap(&other->cs_);
    gs_.Swap(&other->gs_);
    cgs_.Swap(&other->cgs_);
    wd_.Swap(&other->wd_);
    cells_.Swap(&other->cells_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridData_descriptor_;
  metadata.reflection = GridData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dsl

// @@protoc_insertion_point(global_scope)
